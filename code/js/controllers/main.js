// Generated by CoffeeScript 1.3.3
(function() {
  var Main_Controller_VM, Square_VM, Templates,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Templates = {
    HOME: 'home_page',
    SETTINGS: 'settings_page'
  };

  Square_VM = (function() {

    function Square_VM(marker) {
      if (marker == null) {
        marker = this.BLANK_MARKER;
      }
      this.marker = ko.observable(marker);
    }

    Square_VM.prototype.HUMAN_MARKER = 'X';

    Square_VM.prototype.CPU_MARKER = 'O';

    Square_VM.prototype.BLANK_MARKER = '';

    return Square_VM;

  })();

  Main_Controller_VM = (function() {

    function Main_Controller_VM(inits) {
      this.Refresh_JQM = __bind(this.Refresh_JQM, this);

      this.Tap_Settings = __bind(this.Tap_Settings, this);

      this.Tap_Home = __bind(this.Tap_Home, this);

      this._Create_Board = __bind(this._Create_Board, this);

      var _this = this;
      this.board_squares = ko.observableArray([]);
      this.template_name = ko.observable(Templates.SETTINGS);
      this.display_page = function() {
        return _this.template_name();
      };
      this.title = ko.observable("Home Testing");
      this.player_name = ko.observable("");
      this.need_help = ko.observable(false);
      this.first_player = ko.observable("");
      this.difficulty_level = ko.observable("Easy");
      this.difficulty_options = ko.observableArray(['Easy', 'Semi-Easy', 'Medium', 'Hard', 'Crazy']);
      this.settings = ko.computed(function() {
        if (!_this.player_name()) {
          return "Need to pick a name";
        } else {
          return "" + (_this.player_name()) + "\nis going " + (_this.first_player() === 'me' ? 'first' : 'second') + ",\n" + (_this.need_help() ? 'wants' : 'does not want') + " help,\nand is playing at " + (_this.difficulty_level()) + " difficulty.";
        }
      });
      this._Create_Board();
    }

    Main_Controller_VM.prototype._Create_Board = function() {
      var n, underlying_board, _i, _ref;
      underlying_board = this.board_squares();
      for (n = _i = 1, _ref = 3 * 3; 1 <= _ref ? _i <= _ref : _i >= _ref; n = 1 <= _ref ? ++_i : --_i) {
        underlying_board.push(new Square_VM());
      }
      underlying_board[1].marker(Square_VM.prototype.HUMAN_MARKER);
      underlying_board[3].marker(Square_VM.prototype.CPU_MARKER);
      return this.board_squares.valueHasMutated();
    };

    Main_Controller_VM.prototype.Tap_Home = function(d, e) {
      return this.template_name(Templates.HOME);
    };

    Main_Controller_VM.prototype.Tap_Settings = function(d, e) {
      return this.template_name(Templates.SETTINGS);
    };

    Main_Controller_VM.prototype.Refresh_JQM = function(d) {
      $(d).trigger("create");
    };

    return Main_Controller_VM;

  })();

  $(document).one('app_init', function(e, d) {
    var model;
    console.log("Loading Main VM");
    model = new Main_Controller_VM();
    ko.applyBindings(model);
  });

}).call(this);
